def is_safe(board, row, col, N):
    # Check if there is a queen in the current row on the left side
    for i in range(col):
        if board[row][i] == 1:
            return False
    
    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    # Check lower diagonal on the left side
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    return True

def solve_n_queens_util(board, col, N):
    if col >= N:
        return True
    
    for i in range(N):
        if is_safe(board, i, col, N):
            board[i][col] = 1
            if solve_n_queens_util(board, col + 1, N):
                return True
            board[i][col] = 0
    
    return False

def solve_n_queens(N):
    board = [[0] * N for _ in range(N)]
    
    if not solve_n_queens_util(board, 0, N):
        print("Solution does not exist")
        return False
    
    print_solution(board)
    return True

def print_solution(board):
    for i in range(len(board)):
        for j in range(len(board[i])):
            print(board[i][j], end=" ")
        print()

N = 4 # Change N to the desired size of the chessboard
solve_n_queens(N)
